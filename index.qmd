---
format: 
  revealjs:
    slide-number: true
    logo: images/future-logo.png
    footer: <https://www.futureverse.org>
    HIDE_include-in-header: heading-meta.html
    code-copy: true
    center-title-slide: false
    code-link: true
    code-overflow: wrap
    highlight-style: a11y
    width: 1600
    height: 900
    margin: 0.02
    theme: [simple, assets/futureverse.scss]
    css: [assets/custom.css, assets/syntax-highlight.css]
    chalkboard: 
      buttons: false
    preview-links: auto
    pointer:
      pointerSize: 32

revealjs-plugins:
  - pointer
  - bsicons

execute:
  eval: false
  echo: true
---

<h1>Futureverse P2P:<br>Peer-to-Peer Parallelization in R</h1>

<h2><em>- Share compute among friends across the world</em></h2>

<hr/>
<br/>

### Henrik Bengtsson

#### University of California, San Francisco
#### R Foundation, R Consortium

{{< bi github >}} {{< bi mastodon >}} {{< bi bluesky >}} \@HenrikBengtsson<br>

![](images/future-logo.png){.absolute top=20 right=20 width="250"}

<br/>

#### useR! 2025, Durham, NC, USA (2025-08-10)



## Future ... what?

:::: {.columns}

::: {.column width="35%" font="150%" .fragment}
An R assignment:
```{r}
#| code-line-numbers: false
a <- 1 + 2
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%" font="150%" .fragment}
A future-value assignment:
```{r}
#| code-line-numbers: false
f <- future({ 1 + 2 })
a <- value(f)
```
:::

<br>

::: {.column width="35%" font="150%" .fragment}
```{r}
#| code-line-numbers: false
x <- 1:10
b <- slow_sum(x)
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%" font="150%" .fragment}
```{r}
#| code-line-numbers: false
x <- 1:10
f <- future({ slow_sum(x) })
b <- value(f)
```
:::

::::


## Future ... why? (bc enables parallel processing)

:::: {.columns}

::: {.column width="42%" font="135%" .fragment}
Two calculations:
```{r}
#| code-line-numbers: "1-2|1-3|1-4|"
x_a <- 1:10
x_b <- 11:20
a <- slow_sum(x_a) # 1 min
b <- slow_sum(x_b) # 1 min
c <- a + b
```

::: {.fragment}
Total time: 2 mins
:::

:::



::: {.column width="1%"}
:::


::: {.column width="57%" font="135%" .fragment}
Two futures:
```{r}
#| code-line-numbers: "1-2|1-4|1-6|1-7|"
x_a <- 1:10
x_b <- 11:20
f_a <- future( slow_sum(x) ) # ~0 sec
f_b <- future( slow_sum(x) ) # ~0 sec

a <- value(f_a)              # ~1 min
b <- value(f_b)              
c <- a + b
```

::: {.fragment}
Total time: 1 mins
:::

:::

::::

. . .

<br>

### => futures are the core building block for parallel processing


## Futureverse allows you to stick with your favorite coding style

Parallel alternatives to traditional, sequential functions:

```{r}
#| code-line-numbers: "1|"
ys <- lapply(xs, slow_sum)                    # base R
ys <- future_lapply(xs, slow_sum)             # {future.apply}
```
<span style="height:10px"/>
<br>

. . .


```{r}
#| code-line-numbers: "1|"
ys <- map(xs, slow_sum)                       # {purrr}
ys <- future_map(xs, slow_sum)                # {furrr}
```



## {data-background-color=#D0F0FF}

<center style="font-size: 400%; padding-top: 3.5ex;">
Let's go back in time ...
</center>


## Ten-Year Anniversary (future 0.6.0 released June 2015)

<center>
![](images/future-logo-balloons.png){width="40%"}

<small>
_future logo: **Dan LaBar**_, 
_ggplot2 logo balloon wall: **Greg Swinehart** & **Hadley Wickham**_
</small>
</center>


## useR! 2016 at Stanford, CA, USA

<center>
<img src="images/useR2016-slide-01.png" style="width: 60%; border: 2px solid black; padding: 10px; box-shadow: 5px 10px gray;">
</center>

## useR! 2016 at Stanford, CA, USA

<center>
<img src="images/useR2016-slide-05.png" style="width: 60%; border: 2px solid black; padding: 10px; box-shadow: 5px 10px gray;">
</center>


## useR! 2016 at Stanford, CA, USA

<center>
<img src="images/useR2016-slide-07.png" style="width: 60%; border: 2px solid black; padding: 10px; box-shadow: 5px 10px gray;">
</center>


## useR! 2016 at Stanford, CA, USA

<center>
<img src="images/useR2016-slide-12.png" style="width: 60%; border: 2px solid black; padding: 10px; box-shadow: 5px 10px gray;">
</center>


## useR! 2016 at Stanford, CA, USA

<center>
<img src="images/useR2016-slide-27.png" style="width: 60%; border: 2px solid black; padding: 10px; box-shadow: 5px 10px gray;">
</center>



## {data-background-color=#D0F0FF}

<center style="font-size: 400%; padding-top: 3.5ex;">
Back to the Future
</center>


## Long running pipelines and parallelization

<br/>

You: _Argh, this takes foreeeeever_

```r
y <- lapply(many_samples, fit_model)
```

. . .

You: _Better, but I wish I had a bigger computer _

```r
library(future.apply)
plan(multisession, workers = 8)
y <- future_lapply(many_samples, fit_model)
```
<div style="height: 0.5ex"></div>


## future.p2p: sharing compute among friends - it's easy!

<div style="height: 0.5ex"></div>

Alice: _Don't worry - just join our compute cluster_

::: {.column width="70%" font="150%"}
```{r}
#| code-line-numbers: false
library(future.apply)
plan(future.p2p::cluster, cluster="alice/friends")
y <- future_lapply(many_samples, fit_model)
```
:::

![](images/world-p2p-network-three-users.png){.absolute top=280 right=-10 width="550"}



## {data-background-color=#D0F0FF}

<center style="font-size: 400%; padding-top: 2.5ex;">
How to get started ...
</center>


## A P2P cluster has two components

:::: {.fragment}
::: {.column width="65%" font="100%"}
<span style="font-size: 180%">Message Board</span>

Used to announce futures and offers to do work
<br>
(centralized; lightweight - only metadata)
:::
::: {.column width="30%" font="100%"}
![](images/message_board.png){width="350"}
:::
::::

:::: {.fragment}
::: {.column width="65%" font="100%"}
<span style="font-size: 180%">P2P file-transfer protocol</span>

Used to send futures to workers and receive results
<br>
(peer-to-peer; full-size data transfers)
:::
::: {.column width="30%" font="100%"}
![](images/p2p-file-transfers.png){width="350"}
:::
::::


## Alice hosts a P2P cluster

Alice sets up P2P cluster and gives 'bob' and 'carol' access:

```{r}
#| code-line-numbers: false
[alice]> future.p2p::cluster("alice/friends", users=c("bob", "carol"))
```

This is basically setting up a shared message board.

. . .

<br>
Q. What happens if Bob tries to use the P2P cluster?

```{r}
#| code-line-numbers: false
[bob]> library(future)
[bob]> plan(future.p2p::cluster, cluster = "alice/friends")
[bob]> y <- furrr::future_map(many_samples, fit_model)
```

. . .

<br>

### Nothing - it will get stuck! Why?


## Contributing P2P workers is easy!

```{r}
#| code-line-numbers: false
[alice]> future.p2p::worker("alice/friends")
```
<div style="height:1ex;"></div>
```{r}
#| code-line-numbers: false
[ bob ]> future.p2p::worker("alice/friends")
```
<div style="height:1ex;"></div>
```{r}
#| code-line-numbers: false
[carol]> future.p2p::worker("alice/friends")
```

. . .

<br>

```{r}
#| code-line-numbers: false
[bob]> library(future)
[bob]> plan(future.p2p::cluster, cluster = "alice/friends")
[bob]> y <- furrr::future_map(many_samples, fit_model)
```

<br>

### => Processed on three P2P workers



## Setup can be done from the terminal

Setting up a P2P cluster:

```{r}
#| code-line-numbers: false
{alice}$ Rscript -e future.p2p::cluster --cluster=alice/friends \
         --users=bob,carol
```

. . .

Starting P2P workers:

```{r}
#| code-line-numbers: false
{alice}$ Rscript -e future.p2p::worker --cluster=alice/friends &
{ bob }$ Rscript -e future.p2p::worker --cluster=alice/friends &
{carol}$ Rscript -e future.p2p::worker --cluster=alice/friends &
{carol}$ Rscript -e future.p2p::worker --cluster=alice/friends &
{carol}$ Rscript -e future.p2p::worker --cluster=alice/friends &
```

. . .

<br>

### => A shared P2P cluster with 5 workers. More can be added at any time!


## Contributing your compute power is easy!

```r
{bob}$ R --quiet
> future.p2p::worker(cluster = "alice/friends")
```

. . .

or directly from the command line:

```r
{bob}$ Rscript -e future.p2p::worker --cluster=alice/friends
```

. . .


To contribute multiple workers, just repeat the above, e.g. four workers

```r
{bob}$ Rscript -e future.p2p::worker --cluster=alice/friends &
{bob}$ Rscript -e future.p2p::worker --cluster=alice/friends &
{bob}$ Rscript -e future.p2p::worker --cluster=alice/friends &
{bob}$ Rscript -e future.p2p::worker --cluster=alice/friends &
```




## {data-background-color=#D0F0FF}

<center style="font-size: 400%; padding-top: 2.5ex;">
Pros and cons
</center>


## High latency, high throughput with distributed processing

* High latency:

  - roundtrip takes time, because p2p file transfers take time
  
  - Example: `1+2` takes 2-30 seconds to send, evaluate, and recieve

* High throughput:

  - can evaluate 1000's of R expressions concurrently



## P2P computing requires mutual trust

 * Running someone else's code is risky, e.g. `system("erase harddrive")`
  
 * Receiving results from someone else is less risky, but can we trust
   the results?

. . .

Some technical mitigations:

 * End-to-end encryption

 * Run workers in sandboxed environments, e.g. process futures
 
   - in a Linux container, or
   - in a virtual machine
   
   without access to the internet, the file system, etc.

### => I encourage work on these topics - it's challenging, but important


## Stay tuned for exiting announcements

Near future:

::: {.incremental}

 * Custom random number generators (RNG) [together with Ralf Stubner]
 * If you think **furrr** and **future.apply** are neat - just wait!

:::

. . .


On the horizon:

::: {.incremental}

 * More near-live condition signaling from _running_ parallel processes, e.g.
   - **progressr** already uses it 
   - Update **shiny** reactive elements (as things progress)
   
 * Resource specifications, e.g.
   - avoid memory overuse, e.g. `memory=2*GiB`
   - distribute to proper machines, e.g. `memory=2*GiB` and `gpu`
 
 * ... and more

:::

:::

## The future is bright!

* Itâ€™s easy to get started - just try it
* Support: <https://github.com/HenrikBengtsson/future/discussions>
* Tutorials: <https://www.futureverse.org/tutorials.html>
* Blog posts: <https://www.futureverse.org/blog.html>
* More features on the roadmap
* I love feedback and ideas

![](images/out.png){.absolute bottom=90 right=50 width="800"}


## {data-background-color=#D0F0FF}

<center style="font-size: 400%; padding-top: 2.5ex;">
Thank you!
<br>
Questions?
</center>


## Appendix: Setup

* You need a pico.sh account, just `ssh pico.sh` once

* Share your pico username with your friends
